<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize dialog when created
dialog_init();
dialog_import();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Unpause a frame later so they can't move between messages
if(!dialog_count()) {
    game_unpause();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Say the room start dialog after objects have been drawn
switch(room) {
    case r1:
        if(Controller.state == GS_BEGIN) {
            dialog_msg( "Whoa."+WAIT+WAIT+" There are more of them! "+WAIT+WAIT+
                        "These guys are just passengers even."+WAIT+"."+WAIT+"."+WAIT+
                        " I guess I still have to fight them though. "+WAIT+WAIT+
                        "This time I'll be more careful and block their attacks. "+
                        "(Use "+SIZE+"kX"+SIZE+"d or "+SIZE+"kc"+SIZE+"d to block)", "You");
            Controller.state = GS_FIRSTENEMY;
        }
        break;
    case r2:
        if(Controller.state == GS_GARBAGEOPEN) {
            dialog_msg( "HELLLLP!"+WAIT+WAIT+" Save me from these monsters,"+WAIT+" then come talk to me. (Use the "+SIZE+"kX"+SIZE+"d or "+SIZE+"kc"+SIZE+" to speak)", "Train worker");
        }
        break;
    case r5:
        if(Controller.state == GS_GOLDFORK) {
            dialog_msg("Those things are really getting big."+WAIT+WAIT+" Good thing the conductor is through there.", "You");
        }
        break;
    case rCond:
        audio_stop_music();
        dialog_msg("Welcome,"+WAIT+" Dave. "+WAIT+WAIT+"I've been watching you.", "Conductor");
        dialog_msg( "That's just a little creepy. "+WAIT+WAIT+"Kind of like your passengers. "+WAIT+WAIT+
                    "Why are they evolving into these monsters?", "You");
        dialog_msg( "Because I told them to. "+WAIT+WAIT+"Why are you stabbing them to death with my forks?", "Conductor");
        dialog_msg("They're trying to kill me!", "You");
        dialog_msg("Well they did a surprisingly poor job of that. "+WAIT+WAIT+"I guess I'll have to kill you myself!", "Conductor");
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deal with questions
//Dealing with input is done in End Step after the instances have been activated,
//allowing other instances to be affected.
if(currentOption != -1 &amp;&amp; dialog_count() == 1) {
    //If you do not want to ask for confirmation uncomment the following:
    //diaPos = string_length(dialog_get());
    //Also, remove both the 'diaPos = 0;' lines from below and do the 
    //necessary changes to the dialog_draw() event
    //Change options with up/down. Loop if gone past the last one
    if(check_input_pressed(vk_down)) {
        diaPos = 0; //Set diaPos to 0 to make the user confirm after changing option
        currentOption = (currentOption + 1) % optionCount;
    } else if(check_input_pressed(vk_up)) {
        diaPos = 0; 
        currentOption = ((currentOption - 1) + optionCount) % optionCount;
    }
} else if(!dialog_count() &amp;&amp; currentOption != -1) {
    /* If you prefer, you can figure out what the question was in other ways too.
    This is, in my opinion, the simplest way. If you find an easier one please
    tell me.*/
    //Save the question 
    var question = questionAsked, answer = currentOption;
    //Clear values. Must be done before handling in case you want to ask another question
    questionAsked = "";
    currentOption = -1;
    switch(question) {
        case "How about...":
            switch(answer) {
                case 0: //Why can't I have it?
                    dialog_msg( "It's against train rules to give the passengers the keys to the doors. "
                                +WAIT+WAIT+"You know how it is,"+WAIT+" with safety and all that.", "Train worker");
                    dialog_question("How about...", "Why can't I have it?", "Please..?", "Can you open the door for me then?", "Never mind");
                    break;
                case 1: //Please..?
                    dialog_msg( "No!"+WAIT+WAIT+" Whining isn't going to get you anywhere. "+WAIT+WAIT+
                                "Haven't your parents taught you that yet?", "Train worker");
                    dialog_question("How about...", "Why can't I have it?", "Please..?", "Can you open the door for me then?", "Never mind");
                    break;
                case 2: //Can you open the door for me then?
                    dialog_msg("Nope. "+WAIT+WAIT+"Conductor said not to let anyone past this door, "+WAIT+"no matter what", "Train worker");
                    dialog_msg( "Doesn't that seem a little fishy to you? "+WAIT+WAIT+
                                "Why wouldn't anyone be allowed through here. "+WAIT+WAIT+
                                "That room's not even near anything special.", "You");
                    dialog_msg( "I suppose."+WAIT+"."+WAIT+"."+WAIT+" Ever since I've been working here he's had strange orders like this. "+WAIT+WAIT+
                                "I just never thought about them. "+WAIT+WAIT+"I'll let you through,"+WAIT+" but you'd better not tell him it was me!", "Train worker");
                    dialog_msg( "Oh."+WAIT+WAIT+" You can also have this fork."+WAIT+WAIT+" I think it's stronger than that one you have.", "Train worker");
                    inv_add("Key Fork", 1);
                    inv_add("Silver Fork", 1);
                    ScaredStaff.givenKey = true;
                    break;
                case 3: //Never mind
                    dialog_msg("See you later sir!", "Train worker");
                    break;
            }
            break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deal with string input
if(is_string(inputValue) &amp;&amp; dialog_count() == 1) {
    //Change the input value
    //Uncomment the next line if you don't want a confirm
    //diaPos = 1;
    //Also remove the 'diaPos = 0;' line from below
    if(inputValue != keyboard_string) {
        inputValue = keyboard_string;
        diaPos = 0; //Reset diaPos if the string has changed to make the player confirm again
    }
} else if(is_string(inputValue) &amp;&amp; !dialog_count()) {
    /* This works essentially the same as with options.
    Feel free to change the method of determining the question here too. */
    //Save question and answer
    var question = questionAsked, answer = inputValue;
    //Clear input values
    questionAsked = "";
    inputValue = 0;
    switch(question) {
        default:
            break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go to next message, or skip to the end
if(check_input_pressed(vk_control)) {
    dialog_next();
    //Reactivate instances if there are no more messages
    //Reactivating them here ensures there is no frame where they aren't drawn
    if(!dialog_count()) {
        alarm[1] = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set alarm for drawing messages
//Do room start messages 1 frame in so that the objects draw once
//If you don't want the sprites to show up until the dialog is finished,
//put the dialog_msg()'s in here.
alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw dialog
if(dialog_count()) {
    //Pause the game
    game_pause();
    //Darken the surroundings if you want to draw attention to the dialog
    //Remove these 4 lines if you don't 
    draw_set_alpha(0.2);
    draw_set_color(c_black);
    draw_rectangle(0, 0, window_get_width(), window_get_height(), false);
    draw_set_alpha(1);
    /****************************************************/
    //Draw the sprites, box, and message on top of the paused game
    dialog_draw();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
