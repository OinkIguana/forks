<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sEnemy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize variables
hp = 100;
dmg = 10;
def = 0;
drop = noone;
attackTime = room_speed;
invincible = 0;
knock = 0;
evolving = room_speed / 2;
blocking = false;
attacking = false;
image_speed = 0;
visionRange = 300;
noShatter = false;
sprOrig = sprite_index;
size = 1;
hitCount = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Die
if(!noShatter) {
    audio_play_sound(aMonsterDie, 0, false);
    repeat(5) {
        instance_create(x, y - irandom_range(64, 128), Coal);
    }
    if(!irandom(2)) {
        instance_create(x, y - irandom_range(64, 128), Food);
    }
    if(drop != noone) {
        instance_create(x, y - irandom_range(64, 128), drop);
    }
    //Special things
    switch(room) {
        case rStart:
            dialog_msg( "Well."+WAIT+WAIT+". That was odd."+WAIT+"."+WAIT+"."+WAIT+
                        " And terrifying."+WAIT+WAIT+" Maybe the conductor knows what's "+
                        "wrong with his staff."+WAIT+WAIT+" I should go ask him.", "You");
            break;
        case r1:
            if(instance_number(_enemy) == 1) {
                dialog_msg( "Those two were stronger than the waitor. "+WAIT+WAIT+
                            "It's like they're evolving really quickly, "+WAIT+
                            "getting stronger every second. "+WAIT+WAIT+
                            "I should hurry up then!", "You");
                Garbage.openable = true;
            }
            break;
        case r2:
            if(object_index == Lv1Enemy) {
                instance_create(0, 640, Lv3Enemy);
                instance_create(1408, 640, Lv3Enemy);
            }
            break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move and attack
if(instance_exists(Player)) {
    if(!Controller.paused &amp;&amp; !evolving) {
        if(knock != 0) {
            hspeed = knock;
            knock -= sign(hspeed) * 1/2;
            hspeed = floor(hspeed);
            vspeed = 0;
            image_index = 2;
            while((place_meeting(x + hspeed, y, _wall) || x + hspeed &lt; 0) &amp;&amp; hspeed != 0) {
                hspeed -= min(abs(hspeed), 1) * sign(hspeed);
            }
            image_index = 2;
        } else {
            var spd = 4;
            if((abs(Player.x - x) &gt; 80 || abs(Player.y - y) &gt; 15) &amp;&amp; distance_to_object(Player) &lt; visionRange &amp;&amp; !blocking) {
                if(abs(Player.x - x) &gt; 50) {
                    hspeed = sign(Player.x - x) * spd;
                } else {
                    hspeed = 0;
                }
                if(abs(Player.y - y) &gt; 15) {
                    vspeed = sign(Player.y - y) * spd / 2;
                } else {
                    vspeed = 0;
                }
            } else if(place_meeting(x, y, Player) &amp;&amp; !blocking) {
                hspeed = 0;
                vspeed = 0;
                if(!attackTime) {
                    //Attack
                    if(!Player.knock) {
                        if(!audio_is_playing(aGuyHit1) &amp;&amp; !audio_is_playing(aGuyHit2) &amp;&amp; !Player.blocking) {
                            audio_play_sound(choose(aGuyHit1, aGuyHit2), 0, false);
                        }
                        health -= dmg - (dmg * ((Player.blocking / 10) * 9));
                        Player.knock = sign(Player.x - x) * (dmg - (dmg * ((Player.blocking / 10) * 9)));
                    }
                    attackTime = room_speed;
                    attacking = 10;
                }
            } else {
                hspeed = 0;
                vspeed = 0;
            }
            //Animation
            var idle = 0;
            var moveStart = 0, moveLen = 2;
            var attackFrame = 2;
            if(hspeed != 0 || vspeed != 0) {
                image_xscale = sign(x - Player.x) * size;
                if(image_xscale == 0) {
                    image_xscale = sign(vspeed) * size;
                }
                image_speed = 8 / room_speed;
                if(image_index &gt;= moveStart + moveLen || image_index &lt; moveStart) {
                    image_index = moveStart;
                }
            } else if(blocking) {
                image_index = attackFrame;
                image_speed = 0;
                blocking--;
            } else if(attacking) {
                image_index = attackFrame;
                image_speed = 0;
                attacking--;
            } else {
                image_index = idle;
                image_speed = 0;
            }
        }
    } else {
        hspeed = 0;
        vspeed = 0;
        image_index = 0;
        image_speed = 0;
    }
    attackTime = max(0, attackTime - 1);
} else {
    image_speed = 0;
    hspeed = 0;
    vspeed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get hit
if(instance_exists(Player)) {
    if(place_meeting(x, y, Player) &amp;&amp; !invincible) {
        if(Player.image_xscale == sign(x - Player.x)) {
            if(Player.attacking &gt; 2) {
                hitCount++;
                if(!irandom(4) &amp;&amp; !audio_is_playing(aMonsterHit)) {
                    audio_play_sound(aMonsterHit, 0, false);
                }
                if(irandom(5) &amp;&amp; !blocking) {
                    hp -= max(0, Player.damage - def);
                    knock = sign(x - Player.x) * irandom_range(6, 12);
                } else {
                    hspeed = 0;
                    vspeed = 0;
                    if(!blocking) {
                        blocking = room_speed / 2;
                    }
                }
                invincible = room_speed / 3;
            }
        }
    } else if(invincible) {
        invincible--;
    }
}

if(hp &lt;= 0) {
    //Die
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Evolve
if(evolving) {
    if(!audio_is_playing(aMonsterIn)) {
        audio_play_sound(aMonsterIn, 0, false);
    }
    hspeed = 0;
    vspeed = 0;
    evolving--;
    //Make this nicer
    if((evolving div 2) % 2) {
        if(object_index == Lv1Enemy) {
            sprite_index = sWaitor;
        } else {
            sprite_index = sPassenger;
        }
        image_xscale = 1;
        image_yscale = 1;
    } else {
        sprite_index = sprOrig;
        image_xscale = size;
        image_yscale = size;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw healthbar
draw_healthbar( x - 50 - view_xview[0], y - view_yview[0], x + 50 - view_xview[0], y + 16 - view_yview[0],
                hp, c_red, c_green, c_green, 0, true, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>58,320</point>
    <point>160,160</point>
  </PhysicsShapePoints>
</object>
