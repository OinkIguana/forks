<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Intiailize variables
blocking = false;
attacking = false;
health = 100;

damage = 10;
currentFork = 0;
knock = 0;
eaten = false;
dontSpeak = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Die
if(health &lt;= 0 &amp;&amp; visible) {
    visible = false;
    hspeed = 0;
    vspeed = 0;
    knock = 0;
    repeat(5) {
        instance_create(x - irandom_range(-1, 1), y - irandom_range(64, 128), Coal);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>visible</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>1</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement and actions
player_move();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Do actions with other objects
if(check_input_pressed(vk_control) &amp;&amp; !dialog_count() &amp;&amp; !dontSpeak) {
    var inst;
    if(place_meeting(x, y, Garbage) || place_meeting(x, y, SilverGarbage)) {
        inst = instance_place(x, y, Garbage);
        if(inst == noone) {
            inst = instance_place(x, y, SilverGarbage)
        }
        if(inst.openable &amp;&amp; inst.image_index == 0) {
            inst.image_index = 1;
            inv_add(inst.contents, 1);
            audio_play_sound(aCan, 0, false);
            dialog_msg("There was a key in the garbage.", "You");
        } else {
            if(inst.image_index != 0) {
                dialog_msg("I already took all the useful garbage from in there.", "You");
            } else if(!inst.spoken) {
                if(inst.object_index == Garbage) {
                    dialog_msg("I can't open that right now."+WAIT+WAIT+" There are too many of these things around.", "You");
                } else {
                    dialog_msg("The lid's on really tight,"+WAIT+" and this fork isn't strong enough to pry it off.", "You");
                }
                inst.spoken = true;
            }
        }
    } else if(place_meeting(x, y, ScaredStaff)) {
        if(instance_exists(_enemy)) {
            if(!ScaredStaff.complained) {
                dialog_msg("EEK!"+WAIT+WAIT+WAIT+" Get rid of those things first!!!", "Train worker");
                ScaredStaff.complained = true;
            }
        } else {
            if(!ScaredStaff.givenKey) {
                dialog_msg("Phew. "+WAIT+WAIT+"That was a close one. "+WAIT+WAIT+"Thank you sir.", "Train worker");
                dialog_msg("Do you have the key to this door?"+WAIT+WAIT+" I need to see the conductor.", "You");
                dialog_msg("I do have it."+WAIT+"."+WAIT+"."+WAIT+" But I'm not allowed to give it to you.", "Train worker");
                dialog_msg("Is there anything I can say for you to give it to me then?", "You");
                dialog_msg("Nope.", "Train worker");
                dialog_question("How about...", "Why can't I have it?", "Please..?", "Can you open the door for me then?", "Never mind");
            } else {
                if(inv_has("Gold Fork") != -1 &amp;&amp; inv_has("Silver Fork") != -1) {
                    dialog_msg("Nice,"+WAIT+" you got a better fork than the one I gave you."+WAIT+WAIT+" I'll trade you this key for my silver one back!");
                    inv_subtract(inv_has("Silver Fork"), 1);
                    inv_add("Key Fork", 1);
                } else {
                    dialog_msg("Good luck sir! "+WAIT+WAIT+"And be careful!", "Train worker");
                }
            }
        }
    } else if(place_meeting(x, y, Passenger)) {
        if(!Passenger.spoken) {
            dialog_msg("EEK!", "Lady");
            Passenger.spoken = true;
        }
    }
} else if(!dialog_count() &amp;&amp; dontSpeak) {
    dontSpeak = false;
}
if(check_input_pressed(vk_control)) {
    dontSpeak = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Calculate damage
damage = 10 + (inv_read(currentFork, ITEMINDEX) - 1) * 10;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change room when past the ends
if(x &gt; room_width) {
    if(room_next(room) != -1 &amp;&amp; !knock) { 
        image_xscale = 1;
        x = 64;
        room_goto_next();
    } else {
        x = room_width;
    }
} else if(x &lt; 0) {
    if(room_previous(room) != -1 &amp;&amp; room != rStart &amp;&amp; !knock) {
        image_xscale = -1;
        x = room_width - 64;
        room_goto_previous();
    } else {
        x = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="4" ename="_item">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pick up the item
if(visible) {
    with(other) {
        if(hspeed == 0 &amp;&amp; vspeed == 0 &amp;&amp; myItem != "coal") {
            if(myItem != "") {
                inv_add(myItem, 1);
                switch(myItem) {
                    case "Key Fork":
                        if(room == rStart) {
                            dialog_msg( "What's this?"+WAIT+WAIT+" A fork?"+WAIT+WAIT+" A key? "+WAIT+WAIT+
                                "Maybe it opens the door over there.", "You");
                        }
                        break;
                    case "Steel Fork":
                        dialog_msg( "Sweet a real fork."+WAIT+WAIT+"That will help. "+
                                    "(Press "+SIZE+"kC"+SIZE+"d or "+SIZE+"kr"+SIZE+"d to change forks)", "You");
                        break;
                    case "Gold Fork":
                        dialog_msg( "OH WOW!"+WAIT+WAIT+" A solid gold fork! "+WAIT+WAIT+"Pretty heavy for a fork."+WAIT+"."+WAIT+"."+WAIT+
                                    " I could probably sell this for a lot."+WAIT+WAIT+" Maybe not after killing things with it though.", "You");
                        break;
                    case "Platinum Fork":
                        room_goto(rCredits);
                        break;
                }
            } else {
                health = min(100, health + heal);
                if(!Player.eaten) {
                    Player.eaten = true;
                    dialog_msg( "Is that a steak? "+WAIT+WAIT+"I want to eat it but I've been using this fork "+
                                "to stab people and it's on the ground."+WAIT+"."+WAIT+"."+WAIT+" Oh well. "+WAIT+WAIT+"Let's dig in!", "You");
                }
            }
            instance_destroy();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw health
if(instance_exists(_enemy)) {
    draw_healthbar( x - 50 - view_xview[0], y - view_yview[0], x + 50 - view_xview[0], y + 16 - view_yview[0],
                    health, c_red, c_green, c_green, 0, true, true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw self and fork
if(attacking &gt; 2) {
    if(image_xscale == 1) {
        draw_sprite_ext(inv_itemdb(inv_read(currentFork, ITEMINDEX), ITEMSPRITE), 0, 
                        x + sprite_xoffset + 32, y - 190, image_xscale, image_yscale, 270, image_blend, image_alpha);
    } else {
        draw_sprite_ext(inv_itemdb(inv_read(currentFork, ITEMINDEX), ITEMSPRITE), 0, 
                        x + sprite_xoffset - 32, y - 190, image_xscale, image_yscale, 90, image_blend, image_alpha);
    }
}
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>48,48</point>
  </PhysicsShapePoints>
</object>
